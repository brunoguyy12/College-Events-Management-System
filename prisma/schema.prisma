generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String
  role            UserRole       @default(STUDENT)
  avatar          String?
  bio             String?
  skills          String[]
  interests       String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  organizedEvents Event[]        @relation("EventOrganizer")
  feedback        Feedback[]
  notifications   Notification[]
  registrations   Registration[]

  roleRequests      RoleRequest[] @relation("UserRoleRequests")
  processedRequests RoleRequest[] @relation("AdminProcessedRequests")

  @@map("users")
}

model RoleRequest {
  id            String            @id @default(cuid())
  requestedRole UserRole
  reason        String
  status        RoleRequestStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  processedAt   DateTime?

  userId      String
  user        User    @relation("UserRoleRequests", fields: [userId], references: [id])
  processedBy String?
  processor   User?   @relation("AdminProcessedRequests", fields: [processedBy], references: [id])

  @@map("role_requests")
}

model Event {
  id            String          @id @default(cuid())
  title         String
  description   String
  category      EventCategory
  venue         String
  startDate     DateTime
  endDate       DateTime
  capacity      Int
  price         Float           @default(0)
  status        EventStatus     @default(DRAFT)
  imageUrl      String?
  tags          String[]
  aiScore       Float?
  aiSuggestions String?
  organizerId   String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  analytics     EventAnalytics?
  organizer     User            @relation("EventOrganizer", fields: [organizerId], references: [id])
  feedback      Feedback[]
  registrations Registration[]

  @@map("events")
}

model Registration {
  id        String             @id @default(cuid())
  status    RegistrationStatus @default(PENDING)
  qrCode    String             @unique
  checkedIn Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  userId    String
  eventId   String
  event     Event              @relation(fields: [eventId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("registrations")
}

model Feedback {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  sentiment String?
  topics    String[]
  createdAt DateTime @default(now())
  userId    String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("feedback")
}

model EventAnalytics {
  id                 String   @id @default(cuid())
  totalViews         Int      @default(0)
  totalRegistrations Int      @default(0)
  totalAttendees     Int      @default(0)
  averageRating      Float?
  sentimentScore     Float?
  engagementScore    Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  eventId            String   @unique
  event              Event    @relation(fields: [eventId], references: [id])

  @@map("event_analytics")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum UserRole {
  STUDENT
  ORGANIZER
  ADMIN
}

enum RoleRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventCategory {
  SEMINAR
  WORKSHOP
  HACKATHON
  FEST
  CONFERENCE
  SPORTS
  CULTURAL
  ACADEMIC
  OTHER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  CANCELLED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
}

enum NotificationType {
  EVENT_REMINDER
  REGISTRATION_CONFIRMED
  EVENT_UPDATE
  FEEDBACK_REQUEST
  SYSTEM_ALERT
  ROLE_REQUEST_UPDATE
}
