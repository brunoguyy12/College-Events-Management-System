generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String   @id @default(cuid())
  email  String   @unique
  name   String
  role   UserRole @default(STUDENT)
  avatar String?
  bio    String?

  phone      String?
  year       String?
  rollNumber String?
  linkedIn   String?
  github     String?
  portfolio  String?

  skills          String?
  interests       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  organizedEvents Event[]        @relation("EventOrganizer")
  feedback        Feedback[]
  notifications   Notification[]
  registrations   Registration[]

  roleRequests      RoleRequest[] @relation("UserRoleRequests")
  processedRequests RoleRequest[] @relation("AdminProcessedRequests")

  @@map("users")
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String
  category    EventCategory
  department  Department    @default(COMPUTER_ENGINEERING) // NEW: Department enum with default
  venue       String
  startDate   DateTime
  endDate     DateTime
  capacity    Int
  price       Float         @default(0)
  status      EventStatus   @default(DRAFT)
  imageUrl    String? // Banner Image
  tags        String[]

  // Ai-generated Fields 
  aiScore       Float?
  aiSuggestions String?

  // Rich content fields (JSON)
  speakers     Json? // Speaker profiles for seminars/conferences
  agenda       Json? // Schedule/timetable
  prizes       Json? // Prize details for competitions
  rules        Json? // Rules and regulations
  requirements Json? // Prerequisites/materials needed
  faqs         Json? // Frequently asked questions
  highlights   Json? // Past event highlights

  organizerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  analytics     EventAnalytics?
  organizer     User            @relation("EventOrganizer", fields: [organizerId], references: [id])
  feedback      Feedback[]
  registrations Registration[]
  Notification  Notification[]

  @@map("events")
}

model Registration {
  id            String             @id @default(cuid())
  status        RegistrationStatus @default(CONFIRMED)
  qrCode        String             @unique
  checkedIn     Boolean            @default(false)
  checkedInAt   DateTime?
  feedbackGiven Boolean            @default(false)
  feedbackShown Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  userId        String
  eventId       String
  event         Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user          User               @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("registrations")
}

model Feedback {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  sentiment String? // AI-analyzed sentiment: POSITIVE, NEGATIVE, NEUTRAL
  topics    String[] // AI-extracted topics

  createdAt DateTime @default(now())
  userId    String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@map("feedback")
}

model EventAnalytics {
  id                 String @id @default(cuid())
  totalViews         Int    @default(0)
  totalRegistrations Int    @default(0)
  checkedInCount     Int    @default(0)
  attendanceRate     Float  @default(0)

  averageRating   Float?
  sentimentScore  Float?
  engagementScore Float?
  totalFeedback   Int       @default(0)
  completedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   String   @unique
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("event_analytics")
}

// model Notification {
//   id        String           @id @default(cuid())
//   title     String
//   message   String
//   type      NotificationType
//   read      Boolean          @default(false)
//   createdAt DateTime         @default(now())
//   userId    String
//   user      User             @relation(fields: [userId], references: [id])

//   @@map("notifications")
// }

model Notification {
  id        String               @id @default(cuid())
  userId    String
  eventId   String?
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority @default(MEDIUM)
  read      Boolean              @default(false)
  emailSent Boolean              @default(false)
  data      Json? // Additional data for the notification
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RoleRequest {
  id            String            @id @default(cuid())
  requestedRole UserRole
  reason        String
  status        RoleRequestStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  processedAt   DateTime?

  reviewedBy String?
  reviewedAt DateTime?

  userId      String
  user        User    @relation("UserRoleRequests", fields: [userId], references: [id])
  processedBy String?
  processor   User?   @relation("AdminProcessedRequests", fields: [processedBy], references: [id])

  @@map("role_requests")
}

enum UserRole {
  STUDENT
  ORGANIZER
  ADMIN
}

enum RoleRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EventCategory {
  SEMINAR
  WORKSHOP
  HACKATHON
  FEST
  CONFERENCE
  SPORTS
  CULTURAL
  ACADEMIC
  OTHER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  CANCELLED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
}

enum NotificationType {
  EVENT_REMINDER
  EVENT_UPDATE
  NEW_REGISTRATION
  FEEDBACK_RECEIVED
  ROLE_REQUEST
  EVENT_CREATED
  EVENT_DELETED
  USER_REGISTERED
  CHECK_IN_REMINDER
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// NEW: Department enum
enum Department {
  // Engineering
  COMPUTER_ENGINEERING
  ELECTRICAL_ENGINEERING
  CIVIL_ENGINEERING
  MECHANICAL_ENGINEERING
  CHEMICAL_ENGINEERING

  // Medical & Health
  PHYSIOTHERAPY
  PHARMACY

  // Science
  MICROBIOLOGY
  AGRICULTURE
  BIOTECHNOLOGY
  CHEMISTRY
  PHYSICS
  MATHEMATICS

  // Business & Law
  BUSINESS_ADMINISTRATION
  LAW
  COMMERCE

  // Computer Applications
  COMPUTER_APPLICATION
  INFORMATION_TECHNOLOGY

  // Arts & Humanities
  ARTS
  ENGLISH
  HISTORY

  // Sports & Physical Education
  SPORTS
  PHYSICAL_EDUCATION

  // Other
  OTHER
}
